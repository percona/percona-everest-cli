// Code generated by mockery v2.32.2. DO NOT EDIT.

package install

import (
	context "context"

	client "github.com/percona/percona-everest-backend/client"
	mock "github.com/stretchr/testify/mock"
)

// mockEverestClientConnector is an autogenerated mock type for the everestClientConnector type
type mockEverestClientConnector struct {
	mock.Mock
}

// CreateBackupStorage provides a mock function with given fields: ctx, body
func (_m *mockEverestClientConnector) CreateBackupStorage(ctx context.Context, body client.CreateBackupStorageParams) (*client.BackupStorage, error) {
	ret := _m.Called(ctx, body)

	var r0 *client.BackupStorage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.CreateBackupStorageParams) (*client.BackupStorage, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.CreateBackupStorageParams) *client.BackupStorage); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BackupStorage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.CreateBackupStorageParams) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePMMInstance provides a mock function with given fields: ctx, body
func (_m *mockEverestClientConnector) CreatePMMInstance(ctx context.Context, body client.PMMInstanceCreateParams) (*client.PMMInstance, error) {
	ret := _m.Called(ctx, body)

	var r0 *client.PMMInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.PMMInstanceCreateParams) (*client.PMMInstance, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.PMMInstanceCreateParams) *client.PMMInstance); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PMMInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.PMMInstanceCreateParams) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPMMInstance provides a mock function with given fields: ctx, pmmInstanceID
func (_m *mockEverestClientConnector) GetPMMInstance(ctx context.Context, pmmInstanceID string) (*client.PMMInstance, error) {
	ret := _m.Called(ctx, pmmInstanceID)

	var r0 *client.PMMInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.PMMInstance, error)); ok {
		return rf(ctx, pmmInstanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.PMMInstance); ok {
		r0 = rf(ctx, pmmInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PMMInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pmmInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPMMInstances provides a mock function with given fields: ctx
func (_m *mockEverestClientConnector) ListPMMInstances(ctx context.Context) ([]client.PMMInstance, error) {
	ret := _m.Called(ctx)

	var r0 []client.PMMInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]client.PMMInstance, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []client.PMMInstance); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PMMInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterKubernetesCluster provides a mock function with given fields: ctx, body
func (_m *mockEverestClientConnector) RegisterKubernetesCluster(ctx context.Context, body client.CreateKubernetesClusterParams) (*client.KubernetesCluster, error) {
	ret := _m.Called(ctx, body)

	var r0 *client.KubernetesCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.CreateKubernetesClusterParams) (*client.KubernetesCluster, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.CreateKubernetesClusterParams) *client.KubernetesCluster); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.KubernetesCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.CreateKubernetesClusterParams) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockEverestClientConnector creates a new instance of mockEverestClientConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockEverestClientConnector(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockEverestClientConnector {
	mock := &mockEverestClientConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
